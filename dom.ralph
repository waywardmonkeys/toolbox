(define-module dom
  import: (runtime/core)
  export: (<element> <node> add-child log add-listener))

(define-function log (#rest objects)
  ((js:get-property console "log" "apply") console objects))

(define <element> (js:identifier "Element"))
(define <node> (js:identifier "Node"))

;; elements

(define-function create-element (name #key class)
  (js:var element ((js:get-property document "createElement") name))
  (when class
    (add-class element class))
  element)

(define-function create-text-node (text)
  ((js:get-property document "createTextNode") text))

(define-generic add-child (parent child))

(define-function add-child ((parent <element>) (child <element>))
  ((js:get-property parent "appendChild") child))

(define-generic remove-child (parent child))

(define-function delete-element (element)
  (if-bind (parent (get element "parentNode"))
    (begin
     (remove-child parent element)
     #t)))

;; query

(define-function query-id (id)
  ((js:get-property document "getElementById") id))

(define-function query-class (element class)
  ((js:get-property element "getElementsByClassName") class))

(define-generic query-selector (element query))

(define-generic query-selector-all (element query))

;; dimensions

(define-generic element-height (element)
  (js:get-property element "offsetHeight"))

(define-generic element-width (element)
  (js:get-property element "offsetWidth"))

(define-generic element-position (element)
  (make-array
   (js:get-property element "offsetLeft")
   (js:get-property element "offsetTop")))

;; events

(define-generic stop-propagation (event))

(define-generic prevent-default (event))

(define-generic add-listener (object event-name listener))

(define-function add-listener ((node <node>) event-name listener capture?)
  ((js:get-property node "addEventListener") event-name listener capture?))

(define-function add-listener ((object <object>) event-name listener)
  (unless (has? object "%listeners")
    (set! (get object "%listeners")
          (make-object)))
  (bind ((listeners (or (get object "%listeners" event-name)
                        (set! (get object "%listeners" event-name)
                              (make-array)))))
    (push-last listeners listener)))


(define-generic remove-listener (object event-name listener))

(define-function remove-listener ((node <node>)
                                  event-name listener capture?)
  ((js:get-property node "removeEventListener")
   event-name listener capture?))

;; attributes

(define-function attribute (element name)
  ((js:get-property element "getAttribute") name))

(define-function (setter attribute) (element name new-value)
  ((js:get-property element "setAttribute") name new-value))


;; classes

(define-function has-class? (element class)
  (true? (position
          (concatenate " " (js:get-property element "className") " ")
          (concatenate " " class " "))))

(define-function add-class (element class)
  (unless (has-class? element class)
    (js:var classes (js:get-property element "className"))
    (set! (js:get-property element "className")
          (trim (concatenate classes " " class))))
  element)

(define-function remove-class (element class)
  (js:var classes (js:get-property element "className"))
  (set! (js:get-property element "className")
        (trim (replace (concatenate " " class " ")
                       (concatenate " " classes " ")
                       " ")))
  element)
