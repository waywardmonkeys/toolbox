(define-module toolbox/dom
  import: (runtime/core)
  export: (*body* *head* *document* *window*
           <element> <node>
           log error
           append-child delete-element
           add-listener remove-listener
           event-phase event-type event-target
           event-touches event-target-touches event-changed-touches
           event-client-position
           make-element make-event
           query-selector
           prevent-default stop-propagation trigger-event
           add-class attribute
           element-text element-style element-children
           element-inner-height element-inner-width
           element-content-height element-content-width
           element-width element-height
           element-visibility))

(define-function log (#rest objects)
  ((js:inline "Function.prototype.apply.call")
   (js:get-property console "log")
   console objects))

(define-function error (#rest objects)
  ((js:inline "Function.prototype.apply.call")
   (js:get-property console "error")
   console objects))


(define *window* (js:inline "parent.window"))
(define *document* (js:inline "parent.document"))
(define *body* (js:inline "parent.document.body"))
(define *head* (js:inline "parent.document.head"))

(define <element> (js:inline "parent.Element"))
(define <node> (js:inline "parent.Node"))
(define <event> (js:inline "parent.Event"))

;; elements

(define-function make-element (name #key class parent)
  (js:var element ((js:get-property *document* "createElement") name))
  (when class
    (add-class element class))
  (when parent
    (append-child parent element))
  element)

(define-function make-text-node (text)
  ((js:get-property *document* "createTextNode") text))

(define-function element-children ((element <element>))
  (as-array (js:get-property element "children")))

(define-function append-child ((parent <element>) (child <element>))
  ((js:get-property parent "appendChild") child))

(define-function prepend-child ((parent <element>) (child <element>))
  (insert-before parent child
                 (js:get-property parent "firstChild")))

(define-function insert-before ((element <element>) (reference <element>))
  ((js:get-property (element-parent reference) "insertBefore")
   element reference))

(define-function insert-after ((element <element>) (reference <element>))
  (insert-before element (js:get-property reference "nextSibling")))

(define-function remove-child ((parent <element>) (child <element>))
  ((js:get-property parent "removeChild") child))

(define-function element-parent ((element <element>))
  (js:get-property element "parentNode"))

(define-function delete-element (element)
  (if-bind (parent (element-parent element))
    (begin
     (remove-child parent element)
     #t)))

(define-function delete-children ((element <element>))
  ;; NB: don't use firstChild, as it causes heavy
  ;; relayouting of an element with many elements
  (js:while (js:get-property element "lastChild")
    ((js:get-property element "removeChild")
     (js:get-property element "lastChild"))))

(define-function element-height (element)
  (js:get-property element "offsetHeight"))

(define-function element-width (element)
  (js:get-property element "offsetWidth"))

(define-function element-inner-height (element)
  (js:get-property element "clientHeight"))

(define-function element-inner-width (element)
  (js:get-property element "clientWidth"))

(define-function element-top (element)
  (js:get-property element "offsetTop"))

(define-function element-left (element)
  (js:get-property element "offsetLeft"))

(define-function element-content-height (element)
  (js:get-property element "scrollHeight"))

(define-function element-content-width (element)
  (js:get-property element "scrollWidth"))

(define-function element-text (element)
  (js:get-property element "innerText"))

(define-function (setter element-text) (element text)
  (delete-children element)
  (append-child element (make-text-node text)))

(define-function (setter element-style) ((element <element>) name value)
  (set! (js:get-property element "style" name) value))

(define-function (setter element-height) (element height)
  (set! (element-style element "height")
        (concatenate (as-string height) "px")))

(define-function (setter element-width) (element width)
  (set! (element-style element "width")
        (concatenate (as-string width) "px")))

(define-function (setter element-left) (element left)
  (set! (element-style element "left")
        (concatenate (as-string left) "px")))

(define-function (setter element-top) (element top)
  (set! (element-style element "top")
        (concatenate (as-string top) "px")))

(define-function (setter element-visibility) (element visible?)
   (set! (element-style element "visibility")
         (if visible? "visible" "hidden")))

(define-function element-bounds (element)
  ((js:get-property element "getBoundingClientRect")))


;; query

(define-function query-id (id)
  ((js:get-property *document* "getElementById") id))

(define-function query-class (element class)
  ((js:get-property element "getElementsByClassName") class))

(define-function query-selector (element query)
  ((js:get-property element "querySelector") query))

(define-function query-selector-all (element query)
  (as-array ((js:get-property element "querySelectorAll") query)))

(define-function query-xpath (element path #key namespaces)
  (js:var result ((js:get-property *document* "evaluate")
                  path element
                  (if namespaces
                      (curry get namespaces)
                    js:null)
                  (js:inline "XPathResult.ANY_TYPE")
                  js:null))
  (js:var result-type (js:get-property result "resultType"))
  (select result-type ==
   (((js:inline "XPathResult.ORDERED_NODE_ITERATOR_TYPE")
     (js:inline "XPathResult.UNORDERED_NODE_ITERATOR_TYPE"))
    (bind ((current)
           (nodes []))
      (while (set! current ((js:get-property result "iterateNext")))
        (push-last nodes current))
      nodes))
   (((js:inline "XPathResult.STRING_TYPE"))
    (js:get-property result "stringValue"))
   (((js:inline "XPathResult.NUMBER_TYPE"))
    (js:get-property result "numberValue"))
   (((js:inline "XPathResult.BOOLEAN_TYPE"))
    (js:get-property result "booleanValue"))
   (((js:inline "XPathResult.ANY_UNORDERED_NODE_TYPE")
     (js:inline "XPathResult.FIRST_ORDERED_NODE_TYPE"))
    (js:get-property result "singleNodeValue"))
   (else: result)))

(define-function query-position (x y)
  ((js:get-property *document* "elementFromPoint") x y))



;; events

(define-function stop-propagation (event)
  ((js:get-property event "stopPropagation")))

(define-function prevent-default (event)
  ((js:get-property event "preventDefault")))


(define-generic add-listener (object type listener capture?))

(define-function add-listener ((node <node>) type listener capture?)
  ((js:get-property node "addEventListener") type listener capture?))


(define-generic remove-listener (object type listener capture?))

(define-function remove-listener ((node <node>) type listener capture?)
  ((js:get-property node "removeEventListener") type listener capture?))


(define-generic trigger-event (object (event <event>)))

(define-function trigger-event ((node <node>) (event <event>))
  ((js:get-property node "dispatchEvent") event))


(define-function make-event (type #rest rest #key bubble? cancelable?)
  (js:var event ((js:get-property *document* "createEvent") "Event"))
  ((js:get-property event "initEvent") type bubble? cancelable?)
  (for ((i 0 (js:+ i 2)))
       ((js:>= i (size rest)))
    (js:var key (js:get-property rest i))
    (js:var value (js:get-property rest (js:+ i 1)))
    (unless (or (== key (symbol "bubble?"))
                (== key (symbol "cancelable?")))
      (set! (js:get-property event (symbol-name key))
            value)))
  event)

(define-function event-page-position ((event <event>))
  [(js:get-property event "pageX")
   (js:get-property event "pageY")])

(define-function event-client-position ((event <event>))
  [(js:get-property event "clientX")
   (js:get-property event "clientY")])

(define-function event-screen-position ((event <event>))
  [(js:get-property event "screenX")
   (js:get-property event "screenY")])


(define-function event-changed-touches ((event <event>))
  (as-array (js:get-property event "changedTouches")))

(define-function event-target-touches ((event <event>))
  (as-array (js:get-property event "targetTouches")))

(define-function event-touches ((event <event>))
  (as-array (js:get-property event "touches")))

(define-function event-type ((event <event>))
  (js:get-property event "type"))

(define-function event-target ((event <event>))
  (js:get-property event "target"))

(define-function event-phase ((event <event>))
  (select (js:get-property event "eventPhase") ==
    (((js:get-property <event> "CAPTURING_PHASE"))
     "capturing")
    (((js:get-property <event> "AT_TARGET"))
     "at-target")
    (((js:get-property <event> "BUBBLING_PHASE"))
     "bubbling")
    (else:
     "unknown")))

;; attributes

(define-function attribute (element name)
  ((js:get-property element "getAttribute") name))

(define-function (setter attribute) (element name new-value)
  ((js:get-property element "setAttribute") name new-value))


;; classes

(define-function add-class (element class)
  ((js:get-property element "classList" "add") class))

(define-function remove-class (element class)
  ((js:get-property element "classList" "remove") class))

(define-function toggle-class (element class)
  ((js:get-property element "classList" "toggle") class))

(define-function has-class? (element class)
  ((js:get-property element "classList" "contains") class))

(define-function (setter has-class?) (element class enabled?)
  ((if enabled?
       add-class
       remove-class)
   element class))

;;

(define-function focus-element ((element <element>))
  ((js:get-property element "focus")))
