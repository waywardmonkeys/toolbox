(define-module dom
  import: (runtime/core)
  export: (<element> <node> body append-child log add-listener))

(define-function log (#rest objects)
  ((js:get-property console "log" "apply") console objects))

(define body (js:get-property document "body"))

(define <element> (js:identifier "Element"))
(define <node> (js:identifier "Node"))

;; elements

(define-function create-element (name #key class parent)
  (js:var element ((js:get-property document "createElement") name))
  (when class
    (add-class element class))
  (when parent
    (append-child parent element))
  element)

(define-function create-text-node (text)
  ((js:get-property document "createTextNode") text))

(define-function append-child ((parent <element>) (child <element>))
  ((js:get-property parent "appendChild") child))

(define-function prepend-child ((parent <element>) (child <element>))
  (insert-before parent child
                 (js:get-property parent "firstChild")))

(define-function insert-before ((element <element>) (reference <element>))
  ((js:get-property (parent reference) "insertBefore")
   element reference))

(define-function insert-after ((element <element>) (reference <element>))
  (insert-before element (js:get-property reference "nextSibling")))

(define-function remove-child ((parent <element>) (child <element>))
  ((js:get-property parent "removeChild") child))

(define-function parent ((element <element>))
  (js:get-property element "parentNode"))

(define-function delete-element (element)
  (if-bind (parent (parent element))
    (begin
     (remove-child parent element)
     #t)))

(define-function delete-children ((element <element>))
  (js:var child)
  (js:while (set! child (js:get-property element "firstChild"))
    (remove-child element child)))

(define-function parent-element ((element <element>))
  (js:get-property element "parentNode"))

;; query

(define-function query-id (id)
  ((js:get-property document "getElementById") id))

(define-function query-class (element class)
  ((js:get-property element "getElementsByClassName") class))

(define-function query-selector (element query)
  ((js:get-property element "querySelector") query))

(define-function query-selector-all (element query)
  ((js:get-property element "querySelectorAll") query))

;; dimensions

(define-function element-height (element)
  (js:get-property element "offsetHeight"))

(define-function element-width (element)
  (js:get-property element "offsetWidth"))

(define-function element-top (element)
  (js:get-property element "offsetTop"))

(define-function element-left (element)
  (js:get-property element "offsetLeft"))

(define-function (setter element-height) (element height)
  (set! (js:get-property element "style" "height")
        (concatenate (as-string height) "px")))

(define-function (setter element-width) (element width)
  (set! (js:get-property element "style" "width")
        (concatenate (as-string width) "px")))

(define-function (setter element-left) (element left)
  (set! (js:get-property element "style" "left")
        (concatenate (as-string left) "px")))

(define-function (setter element-top) (element top)
  (set! (js:get-property element "style" "top")
        (concatenate (as-string top) "px")))

;; events

(define-generic stop-propagation (event))

(define-generic prevent-default (event))

(define-generic add-listener (object type listener))

(define-function add-listener ((node <node>) type listener capture?)
  ((js:get-property node "addEventListener") type listener capture?))

(define-function add-listener ((object <object>) type listener)
  (unless (has? object "%listeners")
    (set! (get object "%listeners")
          (make-object)))
  (bind ((listeners (or (get object "%listeners" type)
                        (set! (get object "%listeners" type)
                              (make-array)))))
    (push-last listeners listener)))


(define-generic remove-listener (object type listener))

(define-function remove-listener ((node <node>)
                                  type listener capture?)
  ((js:get-property node "removeEventListener")
   type listener capture?))

(define-generic trigger-event (object (event <event>)))

(define-function trigger-event ((node <node>) (event <event>))
  ((js:get-property node "dispatchEvent") event))

(define-function trigger-event ((object <object>) (event <event>))
  (set! (js:get-property event "target") object)
  (do (method (listener)
        (listener event))
      (or (get object "%listeners" (js:get-property event "type"))
          (make-array))))

(define-function make-event (type #rest rest #key bubble? cancelable?)
  (js:var event ((js:get-property document "createEvent") "Event"))
  ((js:get-property event "initEvent") type bubble? cancelable?)
  (for ((i 0 (js:+ i 2)))
       ((js:>= i (size rest)))
    (js:var key (js:get-property rest i))
    (js:var value (js:get-property rest (js:+ i 1)))
    (unless (or (== key (symbol "bubble?"))
                (== key (symbol "cancelable?")))
      (set! (js:get-property event (symbol-name key))
            value)))
  event)

;; attributes

(define-function attribute (element name)
  ((js:get-property element "getAttribute") name))

(define-function (setter attribute) (element name new-value)
  ((js:get-property element "setAttribute") name new-value))


;; classes

(define-function has-class? (element class)
  (true? (position
          (concatenate " " (js:get-property element "className") " ")
          (concatenate " " class " "))))

(define-function add-class (element class)
  (unless (has-class? element class)
    (js:var classes (js:get-property element "className"))
    (set! (js:get-property element "className")
          (trim (concatenate classes " " class))))
  element)

(define-function remove-class (element class)
  (js:var classes (js:get-property element "className"))
  (set! (js:get-property element "className")
        (trim (replace (concatenate " " class " ")
                       (concatenate " " classes " ")
                       " ")))
  element)

;; animation

;; TODO: turn into macro

(define *transition-end-events*
  (make-array
   "webkitTransitionEnd"
   "transitionend"
   "oTransitionEnd"))

(define-function animate (element function)
  (bind-methods ((remove ()
                   (remove-class element "animating")
                   (do (method (event)
                         (remove-listener element event remove #f))
                       *transition-end-events*)))
    (add-class element "animating")
    (do (method (event)
          (add-listener element event remove #f))
        *transition-end-events*)
    (function)))

;;

(define-function focus-element ((element <element>))
  ((js:get-property element "focus")))