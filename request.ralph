(define-module request
  import: (runtime/core runtime/regexp)
  export: (<request> send))

(define-class <request> ()
  in-progress?)

(define-function initialize ((request <request>)
                             #key url (method "GET") (asynchronous? #t))
  (bind ((xhr (set! (get request "xhr")
                    (make (js:identifier "XMLHttpRequest")))))
    (when asynchronous?
      (set! (js:get-property xhr "onreadystatechange")
            (method (event)
              (when (== (js:get-property xhr "readyState") 4)
                (set! (get request "in-progress?") #f)
                (if (== (js:get-property xhr "status") 200)
                    (bind ((data (js:get-property xhr "responseText")))
                      (trigger-event request
                                     (make-event "data" data: data)))
                    (trigger-event request (make-event "error")))))))
    ((js:get-property xhr "open") method url asynchronous?)))

(define-function send ((request <request>) data)
  (set! (get request "in-progress?") #t)
  ((js:get-property request "xhr" "send") data))

(define-function cancel ((request <request>))
  ((js:get-property request "xhr" "abort")))

;; events for XHR transfer (name, capture?):
;; - "progress", #f:
;;   event.lengthComputable => event.loaded, event.total
;; - "load", #f:
;;   transfer complete
;; - "error", #f:
;;   transfer failed
;; - "abort", #f:
;;   transfer has been canceled

(define encode-component (js:identifier "encodeURIComponent"))

(define-function encode (object)
  (bind ((key-values (map (method (key)
                            (concatenate (encode-component key) "="
                                         (encode-component (get object key))))
                          (keys object))))
    (replace (join key-values "&")
             (make <regexp> pattern: "%20" global?: #t)
             "+")))
