(define-module request
  import: (runtime/core)
  export: (<request> send))

(define-class <request> ())

(define-function initialize ((request <request>)
                             #key url (method "GET") (asynchronous? #t))
  (bind ((xhr (set! (get request "xhr")
                    (make (js:identifier "XMLHttpRequest")))))
    (when asynchronous?
      (set! (js:get-property xhr "onreadystatechange")
            (method (event)
              (when (== (js:get-property xhr "readyState") 4)
                (if (== (js:get-property xhr "status") 200)
                    (bind ((data (js:get-property xhr "responseText")))
                      (trigger-event request
                                     (make-event "data" data: data)))
                    (trigger-event request (make-event "error")))))))
    ((js:get-property xhr "open") method url asynchronous?)))

(define-function send ((request <request>) data)
  ((js:get-property request "xhr" "send") data))

;; events for XHR transfer (name, capture?):
;; - "progress", #f:
;;   event.lengthComputable => event.loaded, event.total
;; - "load", #f:
;;   transfer complete
;; - "error", #f:
;;   transfer failed
;; - "abort", #f:
;;   transfer has been canceled